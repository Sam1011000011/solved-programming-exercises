/*(Game: connect four) Connect four is a two-player board game in which the
players alternately drop colored disks into a seven-column, six-row vertically
suspended grid,The objective of the game is to connect four same-colored disks in a row, a column, or a diagonal 
before your opponent can do likewise. The program promptstwo players to drop a red or yellow disk alternately. Whenever a disk
is dropped, the program redisplays the board on the console and determines the
status of the game (win, draw, or continue).*/


import java.util.Scanner;

public class Main {
    static Scanner sc=new Scanner(System.in);
    public static void main(String[] args) {
        char[][] board={{' ',' ',' ',' ',' ',' ',' '},{' ',' ',' ',' ',' ',' ',' '},{' ',' ',' ',' ',' ',' ',' '},{' ',' ',' ',' ',' ',' ',' '},{' ',' ',' ',' ',' ',' ',' '},{' ',' ',' ',' ',' ',' ',' '}};
        int i=64;
        while(!checkAntiDiagonals(board)&&!checkDiagonals(board)&&!checkRows(board)&&!checkColumns(board)&&i!=0){
            if(i%2==0){
                System.out.println("Drop a red disk at column (0–6): ");
                int column= sc.nextInt();
                dropDisk(column,'R', board);
            }
            else{
                System.out.println("Drop a yellow disk at column (0–6): ");
                int column= sc.nextInt();
                dropDisk(column,'Y',board);}
            printBoard(board);
            i--;
        }
        if(i==0)
            System.out.println("the board is filled nobody won");
        if(i%2==1)
            System.out.println("red has won");
        if(i%2==0)
            System.out.println("yellow has won");
}

    private static void dropDisk(int column, char c, char[][] board) {
        int row=5;
        for(;row>0;row--)
            if(board[row][column]==' '){
                board[row][column]=c;
                break;
            }
    }

    private static boolean checkRows(char[][] matrix) {
        if(matrix[0].length<4)
            return false;
        boolean result=false;
        for(int i=0;i< matrix.length;i++)
            for (int j = 0; j < matrix[i].length-3; j++){
                if(matrix[i][j]==matrix[i][j+1]&&matrix[i][j+1]==matrix[i][j+2]&&matrix[i][j+2]==matrix[i][j+3]&&matrix[i][j]!=' ')
                {result =true;
                    break;}
            }
        return result;  }

    private static boolean checkColumns(char[][] matrix) {
        if(matrix.length<4)
            return false;
        boolean result=false;
        for(int j=0;j< matrix[0].length;j++)
            for (int i = 0; i < matrix.length-3; i++)
                if(matrix[i][j]==matrix[i+1][j]&&matrix[i+1][j]==matrix[i+2][j]&&matrix[i+2][j]==matrix[i+3][j]&&matrix[i][j]!=' '){
                    result=true;
                    break;
                }
        return result;
    }

    private static boolean checkDiagonals(char[][] matrix) {
        boolean result=false;
        for(int i=3;i< matrix.length;i++)
            for (int j = 0; j < matrix[i].length-3; j++)
                if(matrix[i][j]==matrix[i-1][j+1]&&matrix[i-1][j+1]==matrix[i-2][j+2]&&matrix[i-2][j+2]==matrix[i-3][j+3]&&matrix[i][j]!=' ')
                {result=true;
                    break;}
        return result;
    }

    private static boolean checkAntiDiagonals(char[][] matrix) {
        boolean result=false;
        for(int i=0;i<matrix.length-3;i++)
            for(int j=0;j<matrix[i].length-3;j++)
                if(matrix[i][j]==matrix[i+1][j+1]&&matrix[i+1][j+1]==matrix[i+2][j+2]&&matrix[i+2][j+2]==matrix[i+3][j+3]&&matrix[i][j]!=' '){
                    result=true;
                    break;
                }
        return result;
    }
    public static void printBoard(char [][] board){
        for(int i=0;i<board.length;i++){
            for(int j=0;j< board.length;j++){
                System.out.print("|"+board[i][j]);}
            System.out.println("|");
            }
        System.out.println("-------------");
    }
}
