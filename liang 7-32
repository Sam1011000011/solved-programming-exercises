/*(Partition of a list) Write the following method that partitions the list using the
first element, called a pivot.
public static int partition(int[] list)
After the partition, the elements in the list are rearranged so that all the elements
before the pivot are less than or equal to the pivot and the elements after the pivot
are greater than the pivot. The method returns the index where the pivot is located
in the new list. For example, suppose the list is {5, 2, 9, 3, 6, 8}. After the partition, the list becomes {3, 2, 5, 9, 6, 8}. Implement the method in a way that takes
at most list.length comparisons. Write a test program that prompts the user
to enter a list and displays the list after the partition. Here is a sample run. Note
that the first number in the input indicates the number of the elements in the list.
This number is not part of the list.
Enter list: 8 10 1 5 16 61 9 11 1
After the partition, the list is 9 1 5 1 10 61 11 16*/

import java.util.Arrays;
import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        System.out.println("enter the list(the first number is the list length): ");
        int[] list=inputIntArray();
        int[] partitioned=partition(list);
        System.out.println("after the partition the list is : "+Arrays.toString(partitioned));

}
    public static int[] partition(int[] list){
        int pivot=list[0];
        int k=1;
        int i=0;
        int j= list.length-1;
        int [] partition_list=new int[list.length];
        while(i< list.length&&j< list.length&&k< list.length){
            if(list[k]<pivot){
                partition_list[i]=list[k];
                k++;
                i++;
            }
            else{
                partition_list[j]=list[k];
                k++;
                j--;
            }
        }
        partition_list[i]=pivot;
        return partition_list;
    }

    public static int[] inputIntArray(){
        Scanner sc = new Scanner(System.in);
        int length= sc.nextInt();
        int[] list=new int[length];
        for(int i=0;i<length;i++)
            list[i]= sc.nextInt();
        return list;
    }}
