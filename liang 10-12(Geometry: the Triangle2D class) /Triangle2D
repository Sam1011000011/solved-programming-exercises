package com.company;

import com.sun.org.apache.bcel.internal.generic.RETURN;

public class Triangle2D {
    MyPoint p1;
    MyPoint p2;
    MyPoint p3;
    public Triangle2D(){
        p1=new MyPoint(0,0);
        p2=new MyPoint(1,1);
        p3=new MyPoint(2,5);
    }
    public Triangle2D(MyPoint p1,MyPoint p2,MyPoint p3){
        this.p1=p1;
        this.p2=p2;
        this.p3=p3;
    }
    public double getArea(){
        return  (1.0/2.0)*Math.abs (p1.getX()*(p2.getY() - p3.getY()) + p2.getX()*(p3.getY() - p1.getY()) + p3.getX()*(p1.getY() - p2.getY()));
    }
    public double getPerimeter(){
        return p1.distance(p2) + p2.distance(p3) + p3.distance(p1);
    }
    public boolean contains(MyPoint p){
        double A=getArea();
        Triangle2D T1=new Triangle2D(p,p1,p2);
        Triangle2D T2=new Triangle2D(p,p1,p3);
        Triangle2D T3=new Triangle2D(p,p3,p2);
        return A== T1.getArea() + T2.getArea() + T3.getArea();
    }
    public boolean contains(Triangle2D T){
        return contains(T.p1) && contains(T.p2) && contains(T.p3);
    }
    public boolean overlaps(Triangle2D T){
        MyPoint[][] lines={{p1,p2},{p1,p3},{p2,p3}};
        MyPoint[][] Tlines={{T.p1,T.p2},{T.p3,T.p1},{T.p2,T.p3}};
        if(contains(T)||T.contains(new Triangle2D(p1,p2,p3)))
            return true;
        else{
        for(int i=0;i<3;i++)
            for(int j=0;j<3;j++) {
                double a=lines[i][0].getY()-lines[i][1].getY();
                double b=-(lines[i][0].getX()-lines[i][1].getX());
                double e=a*lines[i][0].getX()+b*lines[i][0].getY();
                double c=Tlines[j][0].getY()-Tlines[j][1].getY();
                double d=-(Tlines[j][0].getX()-Tlines[j][1].getX());
                double f=c*Tlines[j][0].getX()+d*Tlines[j][0].getY();
                LinearEquation eq=new LinearEquation(a,b,c,d,e,f);
                if(eq.isSolvable())
                    return true;
            }
    return false;
    }}
    public MyPoint getP1() {
        return p1;
    }

    public void setP1(MyPoint p1) {
        this.p1 = p1;
    }

    public MyPoint getP2() {
        return p2;
    }

    public void setP2(MyPoint p2) {
        this.p2 = p2;
    }

    public MyPoint getP3() {
        return p3;
    }

    public void setP3(MyPoint p3) {
        this.p3 = p3;
    }

    public boolean contains(double x, double y) {
        MyPoint p=new MyPoint(x,y);
        return contains(p);
    }
}
